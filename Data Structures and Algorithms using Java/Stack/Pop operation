class Stack {
    private int top; // represents the index position of the top most element in the stack
    private int maxSize; // represents the maximum number of elements that can be stored in the stack
    private int[] arr;

    Stack(int maxSize) {
        this.top = -1; // top is -1 when the stack is created
        this.maxSize = maxSize;
        arr = new int[maxSize];
    }

    // Checking if the stack is full or not
    public boolean isFull() {
        return top >= (maxSize - 1);
    }

    // Adding a new element to the top of the stack
    public boolean push(int data) {
        if (isFull()) {
            return false;
        } else {
            arr[++top] = data;
            return true;
        }
    }

    // Removing and returning the top most element of the stack
    public int pop() {
        if (top < 0) {
            System.out.println("Stack is empty!");
            return Integer.MIN_VALUE; // or throw exception
        } else {
            return arr[top--];
        }
    }

    // Returning the top most element of the stack without removing it
    public int peek() {
        if (top < 0)
            return Integer.MIN_VALUE;
        else
            return arr[top];
    }

    // Displaying all the elements of the stack
    public void display() {
        System.out.println("Displaying stack elements");
        for (int index = top; index >= 0; index--) {
            System.out.println(arr[index]);
        }
    }
}

class Tester {
    public static void main(String args[]) {
        Stack stack = new Stack(5);
        System.out.println("Stack created.\n");

        if (stack.push(1))
            System.out.println("The element is pushed to the stack!\n");
        else
            System.out.println("Stack is full!\n");

        if (stack.push(2))
            System.out.println("The element is pushed to the stack!\n");
        else
            System.out.println("Stack is full!\n");

        if (stack.push(3))
            System.out.println("The element is pushed to the stack!\n");
        else
            System.out.println("Stack is full!\n");

        stack.display();

        System.out.println("Popped element: " + stack.pop());
        System.out.println("Popped element: " + stack.pop());

        stack.display();

        System.out.println("The top element is : " + stack.peek());
    }
}
output:-
Stack created.
The element is pushed to the stack!
The element is pushed to the stack!
The element is pushed to the stack!

Displaying stack elements
3
2
1
Popped element: 3
Popped element: 2
Displaying stack elements
1
The top element is : 1
